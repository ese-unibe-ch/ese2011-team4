1. Explain how a typical HTTP request is processed with the framework (the request lifecycle)
Wow...it's hard to answer that without just copying&pasting it from the play webpage. I try it anyway...

play listens to a specific port, per default 9000 for http requests. If there is a request, it tries to map this request according to the /conf/routes file. For example in my route file could be written:
GET	/events/{id}	Application.show

This means that all requests that match to /posts/{id} go to the show method in the Application controller and it would even pass the arguement {id} (for example localhost:9000/event/13 would call Application.show(13). 

The code within the method is then executed and most probably there is a method call render(args). This is the call for the view part of the MVC pattern. 

It looks for a according view called show.html. There is some groovy stuff in there and maybe also a template (like #{extends 'main.html0/}) which is then also called and rendered and finally all this HTML code is then returned to the client as a HTTP response.

2. How could you test user interfaces with the testing facilities in play! framework?
play! supports three kinds of tests out of the box. Unit tests, functional tests and acceptance tests. All serve a different desire of testing. For user interfaces (aka acceptance tests - well not exactly the same as I understand it, but anyway) play supports selenium. This is kind of automated browser testing if I understood it right. Haven't written one yet - have to... but from the syntax used in a selenium test it looks like you describe the behaviour of a use case (or user story) within the test and pray it doesn't fail. You can also use assertions to verify that a certain text is rendered within the browser and smiliar stuff.
